@implements IDisposable
@implements IAsyncDisposable

<h3>Component Lifecycle Asynchronous</h3>
<p>Check the browser console for details...</p>

@code {
    /*
     * BIG NOT:
     *      When dealing with multiple asynchronous calls, rendering may not behave quite as you'd expect. 
     */
    
    /*
        [3/21/2023 3:36:27 PM]- Set Parameters Async - Begin
        [3/21/2023 3:36:27 PM]- OnInitialized
        
        -- While waiting an async call, StateHasChanged is invoked, triggering the render process
        -- this allows the UI to be updated when the results of any SYNCHRONOUS code that has run up to this point.
        
        [3/21/2023 3:36:27 PM]- OnInitializeAsync is started
        [3/21/2023 3:36:27 PM]- OnAfterRender(firstRender: True)
        [3/21/2023 3:36:27 PM]- OnAfterRenderAsync(firstRender: True)
        [3/21/2023 3:36:28 PM]- OnInitializeAsync is ended
        
        -- End asynchronous InitializeAsync

        [3/21/2023 3:36:30 PM]- OnParameterSet
        [3/21/2023 3:36:30 PM]- OnParameterSetAsync
        [3/21/2023 3:36:30 PM]- OnAfterRender(firstRender: False)
        [3/21/2023 3:36:30 PM]- OnAfterRenderAsync(firstRender: False)
        [3/21/2023 3:36:30 PM]- Set Parameters Async - End 
     */
    
    
    
    
    /*
     * Set the values for any parameter the component defines
     * When: occurs both first time the component is rendered  and whenever parameters could have changed
     */
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine($"[{DateTime.Now}]- Set Parameters Async - Begin");
        await base.SetParametersAsync(parameters);
        Console.WriteLine($"[{DateTime.Now}]- Set Parameters Async - End ");
        
    }
    

    /*
     *  Initialized section
     *  Only runs at first render, the component hasn't been initialized.
     *  Only runs ONCE in a component's lifetime.
     *
     *  The good place to make an API calls.
     */
    
    protected override void OnInitialized()
        => Console.WriteLine($"[{DateTime.Now}]- OnInitialized");

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[{DateTime.Now}]- OnInitializeAsync is started");
        await Task.Delay(3000);
        Console.WriteLine($"[{DateTime.Now}]- OnInitializeAsync is ended");
    }
    
    /*
     *  End Initialization
     */

    
    /*
     *  OnParameterSet and OnParameterSetAsync allow developers to perform actions
     * whenever a component's parameters change.
     */
    protected override void OnParametersSet()
        => Console.WriteLine($"[{DateTime.Now}]- OnParameterSet");

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine($"[{DateTime.Now}]- OnParameterSetAsync");
        return Task.CompletedTask;
    }
    
    /*
     *  OnAfterRender and OnAfterRenderAsync accept a Boolean value.
     *  This boolean value is useful because it allows ONE-TIME operations to be performed
     *  when the component is first rendered.
     */
    

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"[{DateTime.Now}]- OnAfterRender(firstRender: {firstRender})");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"[{DateTime.Now}]- OnAfterRenderAsync(firstRender: {firstRender})");
        return Task.CompletedTask;
    }
    
    public void Dispose() => Console.WriteLine("Component is disposed");

    public ValueTask DisposeAsync()
    {
        Console.WriteLine("Component is asynchronously disposed");
        return ValueTask.CompletedTask;
    }

}