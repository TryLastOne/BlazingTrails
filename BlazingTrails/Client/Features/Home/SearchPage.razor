@page "/search/{SearchTerm}"

@inject HttpClient Http
@inject NavigationManager NavManager
<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            Search
        </li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>

@if (SearchResult is null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="SelectedTrail" />
    <div class="grid">
        @foreach (var trail in SearchResult)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}


@code {
    
    private IEnumerable<Trail>? SearchResult { get; set;}
    private Trail? SelectedTrail { get; set;}

    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var trails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trails.json");
            if (trails is null) return;

            SearchResult = trails.Where(x => x.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)
                                             || x.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));

        }
        catch (HttpRequestException httpRequestException)
        {
            Console.WriteLine($"There was a problem loading trail data: {httpRequestException.Message}");
          
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Something went wrong: {ex.Message}");
          
        }
    }


    private void HandleTrailSelected(Trail trail)
        => SelectedTrail = trail;

}