@using Microsoft.AspNetCore.Components
@using BlazingTrails.Shared.Features.ManageTrails
@using BlazingTrails.Client.Validation
@using BlazingTrails.Shared.Features.ManageTrails.Shared
<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
    <FluentValidationValidator/>
    <FormSection Title="Basic Details"
                 HelpText="This information is used to identity the trail and can be searched to help hikers find it.">
        <FormFieldSet Width="col-6">
            <label for="trailName" class="font-weight-bold text-secondary">Name</label>
            <InputText @bind-Value="_trail.Name" class="form-control" id="trailName"/>
            <ValidationMessage For="@(() => _trail.Name)"/>
        </FormFieldSet>

        <FormFieldSet>
            <label for="trailDescription" class="font-weight-bold text-secondary">Description</label>
            <InputTextArea id="trailDescription" class="form-control" @bind-Value="_trail.Description"/>
            <ValidationMessage For="@(() => _trail.Description)"/>
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="trailLocation" class="font-weight-bold text-secondary">
                Location
            </label>
            <InputText id="trailLocation" @bind-Value="@_trail.Location" class="form-control"/>
            <ValidationMessage For="@(() => _trail.Location)"/>
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="trailImage" class="font-weight-bold text-secondary">
                Image
            </label>
            @if (string.IsNullOrWhiteSpace(_trail.Image))
            {
                <InputFile OnChange="LoadTrailImage" class="form-control-file" id="trailImage" accept=".png,.jpg,.jpeg"/>
            }
            else
            {
                <div class="card bg-dark text-white">
                    <img src="@(_trail.ToImageUrl())" alt="Trail Image"/>
                    <div class="card-img-overlay">
                        <button class="btn btn-primary btn-sm" @onclick="RemoveTrailImage" type="button">Remove</button>
                    </div>
                </div>
            }

        </FormFieldSet>
    </FormSection>

    <FormSection Title="Difficulty"
                 HelpText="Help other hikers out by telling them the length of the trail is how long it might take them.">
        <FormFieldSet Width="col-3">
            <label for="trailLength" class="font-weight-bold text-secondary">Length (Km)</label>
            <InputNumber TValue="int" @bind-Value="_trail.Length" class="form-control" id="trailLength"/>
            <ValidationMessage For="@(() => _trail.Length)"/>
        </FormFieldSet>
        <FormFieldSet Width="col-5">
            <label for="trailTime" class="font-weight-bold text-secondary">Time</label>
            <InputTime id="trailTime" @bind-Value="@_trail.TimeInMinutes"/>
            <ValidationMessage For="@(() => _trail.TimeInMinutes)"/>
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Route Instructions"
                 HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">
        @{
            var i = 0;
            foreach (var route in _trail.Routes)
            {
                i++;
                route.Stage = i;


                <div class="row mt-2">
                    <div class="col-1">
                        <div class="form-group">
                            <label class="font-weight-bold text-secondary">Stage</label>
                            <p>@route.Stage</p>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="routeInstructionDescription">Description</label>
                            <InputText id="routeInstructionDescription"
                                       class="form-control"
                                       @bind-Value="@route.Description">
                            </InputText>
                            <ValidationMessage For="@(() => route.Description)"/>
                        </div>
                    </div>
                    <div class="col-1 d-flex mt-3">
                        <button @onclick="@(() => _trail.Routes.Remove(route))"
                                class="btn btn-link" type="button">
                            <svg width="1em" height="1em" viewBox="0 0 16 16"
                                 class="bi bi-x-circle-fill text-danger" fill="currentColor"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
                            </svg>
                        </button>
                    </div>
                </div>
            }
        }
        <div class="row mt-3">
            <div class="col">
                <button class="btn btn-outline-primary" type="button"
                        @onclick="@(() => _trail.Routes.Add(new RouteInstructionDto()))">
                    Add Instruction
                </button>
                <ValidationMessage For="@(() => _trail.Routes)"></ValidationMessage>
            </div>

        </div>
    </FormSection>

    <div class="mt-5 mb-4">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-outline-secondary"
                        type="button" @onclick="@(() => _trail = new TrailDto())">
                    Reset
                </button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    private EditContext _editContext = default!;
    private IBrowserFile? _trailImage;
    private TrailDto _trail = new();

    [Parameter]
    public TrailDto? Trail { get; set; }

    [Parameter, EditorRequired]
    public Func<TrailDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;
    
    [Parameter]
    public EventCallback<ImageAction> OnImageActionChanged { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapFieldCssClassProvider());
    }

    protected override void OnParametersSet()
    {
        _editContext = new EditContext(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapFieldCssClassProvider());

        if (Trail is null) return;
        _trail.Id = Trail.Id;
        _trail.Name = Trail.Name;
        _trail.Description = Trail.Description;
        _trail.Location = Trail.Location;
        _trail.Image = Trail.Image;
        _trail.ImageAction = ImageAction.None;
        _trail.Length = Trail.Length;
        _trail.TimeInMinutes = Trail.TimeInMinutes;

        _trail.Routes.Clear();
        _trail.Routes.AddRange(Trail.Routes.Select(ri => new RouteInstructionDto
        {
            Stage = ri.Stage,
            Description = ri.Description
        }));
    }

    private async Task SubmitForm()
        => await OnSubmit(_trail, _trailImage);

    public void ResetForm()
    {
        _trail = new TrailDto();
        _editContext = new EditContext(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapFieldCssClassProvider());
        _trailImage = null;
    }


    private void LoadTrailImage(InputFileChangeEventArgs e)
    {
        _trailImage = e.File;
        _trail.ImageAction = ImageAction.Add;
        OnImageActionChanged.InvokeAsync(ImageAction.Add);
    }

    private void RemoveTrailImage()
    {
        _trailImage = null;
        _trail.ImageAction = ImageAction.Remove;
        OnImageActionChanged.InvokeAsync(ImageAction.Remove);
    }
}