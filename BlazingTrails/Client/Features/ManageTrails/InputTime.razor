@inherits InputBase<int>

<div class="input-time">
    <div>
        <input class="form-control @CssClass" type="number" min="0"  value="@_hours"
               @onchange="SetHourValue"/>
        <label>Hours</label>
    </div>
    <div>
        <input class="form-control @CssClass" type="number" min="0" max="59" 
               value="@_minutes"
               @onchange="SetMinutesValue"/>
        <label>Minutes</label>
    </div>
</div>

@code {

    private int _hours;
    private int _minutes;

    private void SetHourValue(ChangeEventArgs e)
    {
        int.TryParse(e.Value?.ToString(), out _hours);
        SetCurrentValue();
    }

    private void SetMinutesValue(ChangeEventArgs e)
    {
        int.TryParse(e.Value?.ToString(), out _minutes);
        SetCurrentValue();
    }

    private void SetCurrentValue()
    {
        CurrentValue = (_hours * 60) + _minutes;
    }
    
    /*
     * This method's job is to convert a string value to the type that the component is bound to on the form
     * model.
     *  Note: depending on how you build a custom input component, this method may not ever get called.
     *
     * If we're writing a component that only required a single HTML input element, we could bind directly to
     * the CurrentValueAsString property of InputBase<T>. When a value is entered in the input, it would set
     * CurrentValueAsString and Blazor would then call the TryParseValueFromString method.
     */
    protected override bool TryParseValueFromString(string? value, out int result, out string? validationErrorMessage)
    {
        throw new NotImplementedException();
    }

    protected override void OnParametersSet()
    {
        if (CurrentValue <= 0) return;
        _hours = CurrentValue / 60;
        _minutes = CurrentValue % 60;
    }

}