@page "/edit-trail/{TrailId:int}"

@inject IMediator Mediator

@using BlazingTrails.Client.Features.ManageTrails.Shared
@using BlazingTrails.Shared.Features.ManageTrails.EditTrail
@using BlazingTrails.Shared.Features.ManageTrails.Shared
<PageTitle>Edit Trail - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Edit Trail</li>
    </ol>
</nav>
@if (_isLoading)
{
    <p>Loading trail...</p>
}
else
{
    <h3 class="mt-5 mb-4">Edit a trail: @_trail.Name</h3>

    @if (_submitSuccessful)
    {
        <SuccessAlert Message="Your trail has been submitted successfully!."/>
    }
    else if (_errorMessage is not null)
    {
        <ErrorAlert Message="@_errorMessage"/>
    }

    <TrailForm Trail="_trail" OnSubmit="OnEditTrail" />
}

@code {
    private bool _isLoading;
    private bool _submitSuccessful;
    private string? _errorMessage;
    private readonly TrailDto _trail = new();

    [Parameter]
    public int TrailId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        var response = await Mediator.Send(new GetTrailRequest(TrailId));
        _trail.Id = response.Trail.Id;
        _trail.Name = response.Trail.Name;
        _trail.Description = response.Trail.Description;
        _trail.Location = response.Trail.Location;
        _trail.Image = response.Trail.Image;
        _trail.TimeInMinutes = response.Trail.TimeInMinutes;
        _trail.Routes.Clear();
        _trail.Routes.AddRange(response.Trail.RouteInstructions.Select(routeInstruction => new RouteInstructionDto
        {
            Stage = routeInstruction.Stage,
            Description = routeInstruction.Description
        }));
        _isLoading = false;
    }

    private async Task OnEditTrail(TrailDto trail, IBrowserFile? trailImage)
    {
        var response = await Mediator.Send(new EditTrailRequest(trail));

        if (!response.IsSuccess)
        {
            _errorMessage = "There was a problem saving your trail.";
            _submitSuccessful = false;
          
        }

        _trail.Name = trail.Name;
        _trail.Description = trail.Description;
        _trail.Location = trail.Location;
        _trail.Length = trail.Length;
        _trail.TimeInMinutes = trail.TimeInMinutes;
        _trail.Routes.AddRange(trail.Routes.Select(route => new RouteInstructionDto
        {
            Stage = route.Stage,
            Description = route.Description
        }));

        if (trailImage is null)
        {
            _errorMessage = "There was a problem saving your trail.";
            _submitSuccessful = false;
        }
        else
        {
            _submitSuccessful = true;
            switch (trail.ImageAction)
            {
                case ImageAction.Add:
                    _submitSuccessful = await ProcessImage(trail.Id, trailImage);
                    break;
                case ImageAction.Remove:
                    _trail.Image = string.Empty;
                    break;
            }
        }

        StateHasChanged();
    }

    private async Task<bool> ProcessImage(int trailId, IBrowserFile trailImage)
    {
        var imageUploadResponse = await Mediator.Send(new UploadTrailImageRequest(trailId, trailImage));
        if (string.IsNullOrWhiteSpace(imageUploadResponse.ImageName))
        {
            _errorMessage = "Your trail was saved,but there was a problem uploading the image.";
            return false;
        }
        _trail.Image = imageUploadResponse.ImageName;
        return true;
    }
}